#!/bin/bash
#
# statsd_to_logstash      This shell script takes care of starting and stopping statsd_to_logstash.
#
# chkconfig: 2345 80 30
# description: Pystatsd is a front end/proxy for the Graphite stats collection and graphing server.
#              
# processname: statsd_to_logstash
# config: /etc/sysconfig/statsd_to_logstash
# pidfile: /var/run/statsd_to_logstash.pid

### BEGIN INIT INFO
# Provides: statsd_to_logstash
# Required-Start: $local_fs $network
# Required-Stop: $local_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop statsd_to_logstash
# Description: Pystatsd is a front end/proxy for the Graphite stats collection and graphing server.
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

# Default settings
LOCAL_PYSTATD_PORT=8125
PCT=90
FLUSH_INTERVAL=10000
COUNTERS_PREFIX=stats
TIMERS_PREFIX=stats.timers
LOGSTASH_HOST=localhost
LOGSTASH_PORT=2003
USER=nobody

# Load settings file if it exists
if [ -e /etc/default/statsd_to_logstash ]; then
    . /etc/default/statsd_to_logstash
fi

PIDFILE=/var/run/statsd_to_logstash.pid

# Check that networking is up.
[ "${NETWORKING}" = "no" ] && exit 1

[ -x /usr/bin/statsd-to-logstash-server ] || exit 5

prog="statsd_to_logstash"

start() {
    # Start daemons.
    ret=0
    echo -n $"Starting $prog: "
    daemon /usr/bin/statsd-to-logstash-server --port $LOCAL_PYSTATD_PORT --pct $PCT --flush-interval $FLUSH_INTERVAL --logstash-host $LOGSTASH_HOST --logstash-port $LOGSTASH_PORT --daemon --pidfile $PIDFILE
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && touch /var/lock/subsys/statsd_to_logstash
    let ret+=$RETVAL


    [ $ret -eq 0 ] && return 0 || return 1
}

stop() {
    # Stop daemons.
    echo -n $"Shutting down $prog: "
    /usr/bin/statsd_to_logstash-server --stop --pidfile $PIDFILE
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/statsd_to_logstash
    return $RETVAL
}

status -p $PIDFILE >/dev/null
running=$?

# See how we were called.
case "$1" in
    start)
	[ $running -eq 0 ] && exit 0
	start
	RETVAL=$?
	;;
    stop)
	[ $running -eq 0 ] || exit 0
	stop
	RETVAL=$?
	;;
    restart|force-reload)
	stop
	start
	RETVAL=$?
	;;
    condrestart|try-restart)
	[ $running -eq 0 ] || exit 0
	stop
	start
	RETVAL=$?
	;;
    status)
	echo -n statsd_to_logstash; status -p $PIDFILE -l statsd_to_logstash
	RETVAL=$?
	;;
    *)
	echo $"Usage: $0 {start|stop|restart|condrestart|status}"
	RETVAL=2
esac

exit $RETVAL
